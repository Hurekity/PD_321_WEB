@page "/teachers/details"
@using Microsoft.EntityFrameworkCore
@using BlazorPD_321.Models
@inject IDbContextFactory<BlazorAppPD_212.Data.BlazorAppPD_212Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Teacher</h2>
    <hr />
    @if (teacher is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">WorkSince</dt>
            <dd class="col-sm-10">@teacher.work_since</dd>
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@teacher.last_name</dd>
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@teacher.first_name</dd>
            <dt class="col-sm-2">MiddleName</dt>
            <dd class="col-sm-10">@teacher.middle_name</dd>
            <dt class="col-sm-2">BirthDate</dt>
            <dd class="col-sm-10">@teacher.birth_date</dd>
        </dl>
        <div>
            <a href="@($"/teachers/edit?id={teacher.teacher_id}")">Edit</a> |
            <a href="@($"/teachers")">Back to List</a>
        </div>
    }
</div>

@code {
    private Teacher? teacher;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        teacher = await context.Teachers.FirstOrDefaultAsync(m => m.teacher_id == Id);

        if (teacher is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
